// identification
let NAME = "avr"
let VERSION = "1.0"
let ARCH = "avr"
let BUILDER = "atmel"
let LICENSE = "GPL"
let COPYRIGHT = "University of Toulouse"
let YEAR = "2019"
let URL = ""

//configuration
let proc = "avr"
let bit_order = "uppermost"
let gliss_isize = "32,16"

// useful types
type bit = card(1)
type byte = card(8)
type word = card(16)

// registers
reg R[32, byte]
//reg X[1, word] alias = R[27] :: R[26]
reg X[1, word] alias = R[26]
//reg Y[1, word] alias = R[29] :: R[28]
reg Y[1, word] alias = R[28]
//reg Z[1, word] alias = R[31] :: R[30]
reg Z[1, word] alias = R[30]
reg PC[1, word]
reg SP[1, word]
reg SR[1, byte]
reg SR_I[1, bit] alias = SR<7..7>
reg SR_T[1, bit] alias = SR<6..6>
reg SR_H[1, bit] alias = SR<5..5>
reg SR_S[1, bit] alias = SR<4..4>
reg SR_V[1, bit] alias = SR<3..3>
reg SR_N[1, bit] alias = SR<2..2>
reg SR_Z[1, bit] alias = SR<1..1>
reg SR_C[1, bit] alias = SR<0..0>

// separated structure
//		flash -- 0x0000-0x3FFF
//		SRAM  -- 0x0000-0x08FF
//			32 registers			0x0000-0x001F
//			64 I/O registers 		0x0020-0x005F
//			160 Ext I/O registers	0x0060-0x00FF
//			Internal SRAM			0x0100-0x08FF

type rindex = card(5)

mode reg_mode(i: rindex) = R[i]
	syntax = format("r%d", i)
	image = format("%5b", i)

op instruction(x: allinstr)
	syntax = x.syntax
	image = x.image
	action = { x.action; PC = PC + 1; }

//ADC â€“ Add with Carry

op allinstr = 
			ADC
		   |ADD
		   |ADIW
		   |AND
		   |ANDI
		   |ASR
		   |BCLR
		   |BLD

op ADC(d: reg_mode, r: reg_mode)
	syntax = format("ADC %s,%s",d,r)                                             //adc r2,r0
	image = format("0001 11 %1b %1b %4b %4b",r<4..4>,d<4..4>,d<3..0>,r<3..0>)    //0001 11rd dddd rrrr
	action = { SR_H = (d<3..3>&r<3..3>)|(r<3..3>&!SR<3..3>)|(!SR<3..3>&d<3..3>); 
			   SR_S = SR_N ^ SR_V; 											     
			   SR_V = (d<7..7>&r<7..7>&!SR<7..7>)|(!d<7..7>&!r<7..7>&SR<7..7>);
			   SR_N = SR<7..7>;												     
			   SR_Z = !(SR<7..7>|SR<6..6>|SR<5..5>|SR<4..4>|SR<3..3>|SR<2..2>|SR<1..1>|SR<0..0>); 
			   SR_C = (d<7..7>&r<6..6>) | (r<7..7>&!SR<7..7>) | (!SR<7..7>&d<7..7>);
			 }

op ADD(d: reg_mode, r:reg_mode)
	syntax = format("ADD %s,%s",d,r)                                             //ADD r2,r0
	image = format("0001 11 %1b %1b %4b %4b",r<4..4>,d<4..4>,d<3..0>,r<3..0>)    //0001 11rd dddd rrrr
	action = { SR_H = (d<3..3>&r<3..3>)|(r<3..3>&!SR<3..3>)|(!SR<3..3>&d<3..3>); 
			   SR_S = SR_N ^ SR_V; 											     
			   SR_V = (d<7..7>&r<7..7>&!SR<7..7>)|(!d<7..7>&!r<7..7>&SR<7..7>);
			   SR_N = SR<7..7>;												     
			   SR_Z = !(SR<7..7>|SR<6..6>|SR<5..5>|SR<4..4>|SR<3..3>|SR<2..2>|SR<1..1>|SR<0..0>); 
			   SR_C = (d<7..7>&r<6..6>) | (r<7..7>&!SR<7..7>) | (!SR<7..7>&d<7..7>);
			 }

op ADIW(d: reg_mode, r:reg_mode)
	syntax = format("ADC %s,%s",d,r)
	//image = "0001 1100 0000 0000"
	image = format("0001 1100 %s %s",d,r)
	action = { }

op AND(d: reg_mode, r:reg_mode)
	syntax = format("ADC %s,%s",d,r)
	//image = "0001 1100 0000 0000"
	image = format("0001 1100 %s %s",d,r)
	action = { }

op ANDI(d: reg_mode, r:reg_mode)
	syntax = format("ADC %s,%s",d,r)
	//image = "0001 1100 0000 0000"
	image = format("0001 1100 %s %s",d,r)
	action = { }

op ASR(d: reg_mode, r:reg_mode)
	syntax = format("ADC %s,%s",d,r)
	//image = "0001 1100 0000 0000"
	image = format("0001 1100 %s %s",d,r)
	action = { }

op BCLR(d: reg_mode, r:reg_mode)
	syntax = format("ADC %s,%s",d,r)
	//image = "0001 1100 0000 0000"
	image = format("0001 1100 %s %s",d,r)
	action = { }

op BLD(d: reg_mode, r:reg_mode)
	syntax = format("ADC %s,%s",d,r)
	//image = "0001 1100 0000 0000"
	image = format("0001 1100 %s %s",d,r)
	action = { }