// identification
let NAME = "avr"
let VERSION = "1.0"
let ARCH = "avr"
let BUILDER = "atmel"
let LICENSE = "GPL"
let COPYRIGHT = "University of Toulouse"
let YEAR = "2019"
let URL = ""

//configuration
let proc = "avr"
let bit_order = "uppermost"
let gliss_isize = "32,16"
let RAMEND = 0x04FF

// useful types
type bit = card(1)
type byte = card(8)
type word = card(16)
type rindex = card(5)

// registers
reg R[32, byte]
reg RP[16, word] alias=R[0]
reg X[1, word] alias = R[26]
reg Y[1, word] alias = R[28]
reg Z[1, word] alias = R[30]
reg PC[1, word] pc = 1
reg SP[1, word]


// status register
reg SREG[1, byte]
reg SREG_I[1, bit] alias = SREG<7..7>
reg SREG_T[1, bit] alias = SREG<6..6>
reg SREG_H[1, bit] alias = SREG<5..5>
reg SREG_S[1, bit] alias = SREG<4..4>
reg SREG_V[1, bit] alias = SREG<3..3>
reg SREG_N[1, bit] alias = SREG<2..2>
reg SREG_Z[1, bit] alias = SREG<1..1>
reg SREG_C[1, bit] alias = SREG<0..0>


// memories

// separated structure
//		flash -- 0x0000-0x3FFF
//		SRAM  -- 0x0000-0x08FF
//			32 registers			0x0000-0x001F
//			64 I/O registers 		0x0020-0x005F
//			160 Ext I/O registers	0x0060-0x00FF
//			Internal SRAM			0x0100-0x08FF

mem M[16, byte] data_memory = 1
mem M16[16, word] alias = M[0]
mem FLASH[17, byte] program_memory = 1

macro store(a, x) = if a < 32 then R[a] = x; else M[a] = x; endif
macro load(x, a) = if a < 32 then x = R[a]; else x = M[a]; endif

op init()
	action = {

		// set SP
		SP = RAMEND;
		M[0x3D + 0x20] = RAMEND<7..0>;
		M[0x3E + 0x20] = RAMEND<15..8>;
	}

op instruction(x: all)
	syntax = x.syntax
	image = x.image
	action = {  x.action; }

op all =
	inst16 | inst32

op inst16(x: all_inst16)
	syntax = x.syntax
	image = x.image
	action = {  PC = PC + 2; x.action; }

op all_inst16 =
	  ADC | ADD | ADIW | SBIW
	| POP | PUSH
	| BRLT
	| RCALL | RET | RJMP
	| IN
	| STD_Y | LDD_Y

op inst32(x: all_inst32)
	syntax = x.syntax
	image = x.image
	action = {  PC = PC + 4; x.action; }

op all_inst32 =
	  LDS | STS 


////// Instruction (alphabetical list) //////


op ADC(d: rindex, r: rindex)
	syntax = format("ADC R%d, R%d", d, r)
	image = format("0001 11%1b%1b %4b %4b", r<4..4>, d<4..4>, d<3..0>, r<3..0>)
	action = {
		let R_ = R[d] + R[r] + SREG_C;
		SREG_C = (R[d]<7..7> && R[r]<7..7>) || (R[r]<7..7> && !R_<7..7>) || (!R_<7..7> && R[d]<7..7>);
		SREG_Z = R_ == 0;
		SREG_N = R_<7..7>;
		SREG_V = (R[d]<7..7> && R[r]<7..7> && !R_<7..7>) || (!R[d]<7..7> && !R[r]<7..7> && R_<7..7>);
		SREG_S = SREG_N ^ SREG_V;
		SREG_H = (R[d]<3..3> && R[r]<3..3>) || (R[r]<3..3> && !R_<3..3>) || (!R_<3..3> && R[d]<3..3>);
		R[d] = R_;
	}


op ADD(d: rindex, r: rindex)
	syntax = format("ADD R%d, R%d", d, r)
	image = format("0000 11%1b%1b %4b %4b", r<4..4>, d<4..4>, d<3..0>, r<3..0>)
	action = {
		let R_ = R[d] + R[r];
		SREG_C = (R[d]<7..7> && R[r]<7..7>) || (R[r]<7..7> && !R_<7..7>) || (!R_<7..7> && R[d]<7..7>);
		SREG_Z = R_ == 0;
		SREG_V = (R[d]<7..7> && R[r]<7..7> && !R_<7..7>) || (!R[d]<7..7> && !R[r]<7..7> && R_<7..7>);
		SREG_S = SREG_N ^ SREG_V;
		SREG_H = (R[d]<3..3> && R[r]<3..3>) || (R[r]<3..3> && !R_<3..3>) || (!R_<3..3> && R[d]<3..3>);
		R[d] = R_;
	}

op ADIW(d: card(2), k: card(6))
	dl = 24 + d*2
	dh = dl + 1
	syntax = format("ADIW R%d:R%d, %d", dh, dl, k)
	image = format("1001 0110 %2b%2b %4b", k<5..4>, d, k<3..0>)
	action = {
		let R_ = (R[dh]::R[dl]) + k;
		SREG_V = !R[dh]<7..7> && R_<15..15>;
		SREG_N = R_<15..15>;
		SREG_Z = R_ == 0;
		SREG_C = !R_<15..15> && R[dh]<7..7>;
		SREG_S = SREG_N ^ SREG_V;
		R[dh]::R[dl] = R_;
	}


op BRLT(k: int(7))
	syntax = format("BRLT .%+d (%+04x)", k, __IADDR + 2 + k*2)
	image = format("1111 00 %7b 100", k)
	action = {
		if SREG_N ^ SREG_V == 1 then PC = PC + k*2; endif;
	}
	

op IN(A: card(6), d: rindex)
	syntax = format("IN R%d, 0x%02x", d, A)
	image = format("1011 0%2b %5b %4b", A<5..4>, d, A<3..0>)
	action = {
		load(R[d], A + 0x20);
	}


op LDD_Y = LDD_Y_ii | LDD_Y_iii | LDD_Y_iv


op LDD_Y_ii(d: rindex)
	syntax = format("LD R%d, Y+", d)
	image = format("1001 000 %5b 1001", d)
	action = {
		load(R[d], Y);
		Y = Y + 1;
	}


op LDD_Y_iii(d: rindex)
	syntax = format("LD R%d, -Y", d)
	image = format("1001 000 %5b 1010", d)
	action = {
		Y = Y - 1;
		load(R[d], Y);
	}


op LDD_Y_iv(d: rindex, q: card(6))
	syntax = format("LDD R%d, Y+%d", d, q)
	image = format("10%1b0 %2b0 %5b 1%3b", q<5..5>, q<4..3>, d, q<2..0>)
	action = {
		load(R[d], Y + q);
	}

op LDS(d: rindex, k: card(16))
	syntax = format("LDS R%d, 0x%04x", d, k)
	image = format("1001 000 %5b 0000 %16b", d, k)
	action = {
		load(R[d], k);
	}


op POP(d: rindex)
	syntax = format("POP R%d", d)
	image = format("1001 000 %5b 1111", d)
	action = {
		SP = SP + 1;
		R[d] = M[SP];
	}


op PUSH(d: rindex)
	syntax = format("PUSH R%d", d)
	image = format("1001 001 %5b 1111", d)
	action = {
		M[SP] = R[d];
		SP = SP - 1;
	}


op RCALL(k: int(12))
	syntax = format("RCALL %d (%04x)", k*2, __IADDR + k*2 + 2)
	image = format("1101 %12b", k)
	action = {
		M[SP] = PC<7..0>;
		SP = SP - 1;
		M[SP] = PC<15..8>;
		SP = SP - 1;
		PC = PC + k*2;
	}

op RET()
	syntax = "RET"
	image = "1001 0101 0000 1000"
	action = {
		SP = SP + 1;
		PC<15..8> = M[SP];
		SP = SP + 1;
		PC<7..0> = M[SP];
	}

op RJMP(k: int(12))
	syntax = format("RJMP %d (%04x)", k*2, __IADDR + k*2 + 2)
	image = format("1100 %12b", k)
	action = {
		PC = PC + k*2;
	}


op SBIW(d: card(2), k: card(6))
	dl = 24 + d*2
	dh = dl + 1
	syntax = format("SBIW R%d:R%d, %d", dh, dl, k)
	image = format("1001 0111 %2b%2b %4b", k<5..4>, d, k<3..0>)
	action = {
		let R_ = (R[dh]::R[dl]) - k;
		SREG_V = R[dh]<7..7> && !R_<15..15>;
		SREG_N = R_<15..15>;
		SREG_Z = R_ == 0;
		SREG_C = R_<15..15> && !R[dh]<7..7>;
		SREG_S = SREG_N ^ SREG_V;
		R[dh]::R[dl] = R_;
	}


op STD_Y = STD_Y_ii | STD_Y_iii | STD_Y_iv


op STD_Y_ii(r: rindex)
	syntax = format("ST Y+, R%d", r)
	image = format("1001 001 %5b 1001", r)
	action = {
		store(Y, R[r]);
		Y = Y + 1;
	}


op STD_Y_iii(r: rindex)
	syntax = format("ST -Y, R%d", r)
	image = format("1001 001 %5b 1010", r)
	action = {
		Y = Y - 1;
		store(Y, R[r]);
	}


op STD_Y_iv(r: rindex, q: card(6))
	syntax = format("STD Y+%d, R%d", q, r)
	image = format("10%1b0 %2b1 %5b 1%3b", q<5..5>, q<4..3>, r, q<2..0>)
	action = {
		store(Y + q, R[r]);
	}


op STS(d: rindex, k: card(16))
	syntax = format("STS 0x%04x, R%d", k, d)
	image = format("1001 001 %5b 0000 %16b", d, k)
	action = {
		store(k, R[d]);
	}

