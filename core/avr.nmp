// identification
let NAME = "avr"
let VERSION = "1.0"
let ARCH = "avr"
let BUILDER = "atmel"
let LICENSE = "GPL"
let COPYRIGHT = "University of Toulouse"
let YEAR = "2019"
let URL = ""

include "config.nmp"
include "DTInstructions.nmp"


op init()
	action = {

		// set SP
		SP = RAMEND;
		M[0x3D + 0x20] = RAMEND<7..0>;
		M[0x3E + 0x20] = RAMEND<15..8>;

		// set PC
		PC = 0;
	}

op instruction(x: all)
	syntax = x.syntax
	image = x.image
	action = {  x.action; }

op all =
	inst16 | inst32

op inst16(x: all_inst16)
	syntax = x.syntax
	image = x.image
	action = {  PC = PC + 2; x.action; }

op all_inst16 =
	LDI | MOV | MOVW | LD_X | LD_X_pi | LD_X_pd | LD_Y_pi | LD_Y_pd | LDD_Y | LD_Z_pi | LD_Z_pd | LDD_Z | ST_X | ST_Xpd | ST_Xpi | STD_Y | ST_Ypd | ST_Ypi | STD_Z | ST_Zpd | ST_Zpi | IN | OUT | PUSH | POP

op inst32(x: all_inst32)
	syntax = x.syntax
	image = x.image
	action = {  PC = PC + 4; x.action; }

op all_inst32 =
	  LDS




