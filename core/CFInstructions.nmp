// identification
let NAME = "avr.CFInstructions"
let VERSION = "1.0"
let ARCH = "avr"
let BUILDER = "atmel"
let LICENSE = "GPL"
let COPYRIGHT = "University of Toulouse"
let YEAR = "2019"
let URL = ""


macro size_next_inst(op: int, result: int) = {
    if op & 0xFE0E == 0x940C  then
        result = 2;  // CALL ou JMP : instruction de 32 bits
    elseif op & 0xFE0F == 0x9000 then
        result = 2;  // LDS ou STS : instruction de 32 bits
    else
        result = 1;  // Par défaut : instruction de 16 bits
    endif;
}

////// Change of Flow Instructions //////

op RJMP(k: int(12))
	syntax = format("RJMP .%+d ; %04x", k*2, __IADDR + k*2 + 2)
	image = format("1100 %12b", k<11...0>)
	action = {
		PC = PC + k*2;
	}

op IJMP ()
    syntax = "IJMP"
    image = "1001 0100 0000 1001"
    action = {
        PC = Z;
    }

op JMP(k: card(22))
    syntax = format("JMP %d (%04x)", k*2, __IADDR + k*2 + 2)
    image = format("1001 010%5b 110%17b",k<21..17>,k<16..0>)
    action = {
        PC=k<15..0>
    }


op RCALL(k: int(12))
	syntax = format("RCALL %d (%04x)", k*2, __IADDR + k*2 + 2)
	image = format("1101 %12b", k)
	action = {
		M[SP] = PC<7..0>;
		SP = SP - 1;
		M[SP] = PC<15..8>;
		SP = SP - 1;
		PC = PC + k*2;
	}

op ICALL()
    syntax = "ICALL"
    image = "1001 0101 0000 1001"
    action = {
        M[SP] = PC<7..0>;
		SP = SP - 1;
		M[SP] = PC<15..8>;
		SP = SP - 1;
        PC = Z;
    }

op CALL(k: card(22))
    syntax = format("CALL 0x%04x", k)
    image = format("1001 010%8b 111%17b", k<21..17>, k<16..0>)
    action = {
        
        M[SP]= PC <7..0>;
        SP = SP - 1;
        M[SP]= PC <15..8>;
        SP = SP - 1;
        PC = k<15..0>;
    }

op RET()
	syntax = "RET"
	image = "1001 0101 0000 1000"
	action = {
		SP = SP + 1;
		PC<15..8> = M[SP];
		SP = SP + 1;
		PC<7..0> = M[SP];
	}

op RETI()
    syntax = "RETI"
    image = "1001 0101 0001 1000"
    action = {
        SP = SP + 1;
		PC<15..8> = M[SP];
		SP = SP + 1;
		PC<7..0> = M[SP];
        SREG_I = 1;
    }

op CPSE(d:rindex, r:rindex)
    syntax = format("CSPE R%d, R%d",d,r)
    image = format("0001 00%1b %5b %4b", r<4..4>, d, r<3..0>)
    action = {
        let Rd = R[d];
        let Rr = R[r];
        if Rd == Rr then 
            let result=0;
            let next_Op = (M[PC+2]) | (M[PC+3] << 8);
            size_next_inst (next_Op,result)
            PC=PC+ (result *2);
        endif;
    }

op CP(d: rindex, r: rindex)
    syntax = format("CP R%d, R%d", d, r)
    image = format("0001 01%1b %5b %4b", r<4..4>, d, r<3..0>)
    action = {
        let Rd = R[d];
        let Rr = R[r];
        let R = Rd - Rr;
        SREG_H = !Rd<3..3>&& Rr<3..3> || Rr<3..3>&& R<3..3> || R<3..3>&&!Rd<3..3>;
		SREG_V = Rd<7..7>&&!Rr<7..7>&&!R<7..7> || !Rd<7..7>&&Rr<7..7>&&R<7..7>;
        SREG_N = R<7..7>;
        SREG_Z = R==0;
		SREG_C = !Rd<7..7>&&Rr<7..7> || Rr<7..7>&&R<7..7> || R<7..7>&&!Rd<7..7>;
        SREG_S = SREG_H ^ SREG_V ;
    }


op CPC(d: rindex, r: rindex)
	syntax = format("CPC R%d, R%d", d, r)
	image = format("0000 01%1b %5b %4b", r<4..4>, d, r<3..0>)
	action = {
		let Rd = R[d];
		let Rr = R[r];
		let R = Rd - Rr - SREG_C;
		SREG_H = !Rd<3..3>&&Rr<3..3> || Rr<3..3>&&R<3..3> || R<3..3>&&!Rd<3..3>;
		SREG_V = Rd<7..7>&&!Rr<7..7>&&!R<7..7> || !Rd<7..7>&&Rr<7..7>&&R<7..7>;
		SREG_N = R<7..7>;
		SREG_Z = R == 0;
		SREG_C = !Rd<7..7>&&Rr<7..7> || Rr<7..7>&&R<7..7> || R<7..7>&&!Rd<7..7>;
		SREG_S = SREG_N ^ SREG_V;
	}

op CPI(d: card(4), k: card(8))
	syntax = format("CPI R%d, 0x%02x ; %d", d+16, k, k)
	image = format("0011 %4b %4b %4b", k<7..4>, d, k<3..0>)
	action = {
		let Rd = R[d + 16];
		let R = Rd - k;
		SREG_H = !Rd<3..3>&&k<3..3> || k<3..3>&&R<3..3> || R<3..3>&&!Rd<3..3>;
		SREG_V = Rd<7..7>&&!k<7..7>&&!R<7..7> || !Rd<7..7>&&k<7..7>&&R<7..7>;
		SREG_N = R<7..7>;
		SREG_Z = R == 0;
		SREG_C = !Rd<7..7>&&k<7..7> || k<7..7>&&R<7..7> || R<7..7>&&!Rd<7..7>;
		SREG_S = SREG_N ^ SREG_V;
	}

op SBRC(r: rindex , b: card(3))
    syntax = format("SBRC R%d, %d",r,b)
    image = format("1111 111%5b 0%3b",r,b)
    action = {
        let Rr = R[r];
        if Rr<b..b>==0 
        then 
            let result=0;
            let next_Op = (M[PC+2]) | (M[PC+3] << 8);
            size_next_inst (next_Op,result)
            if result == 1 then PC=PC+2; else PC=PC+4; endif;
        endif;
    }

op SBRS(r: rindex , b: card(3))
    syntax = format("SBRS R%d, %d",r,b)
    image = format("1111 111%5b 0%3b",r,b)
    action = {
        let Rr = R[r];
        if Rr<b..b>==1
        then 
            let result=0;
            let next_Op = (M[PC+2]) | (M[PC+3] << 8);
            size_next_inst (next_Op,result)
            if result == 1 then PC=PC+2; else PC=PC+4; endif;
        endif;
    }

op SBIC(a: rindex, b: card(3)) 
    syntax = format("SBIC IO%d, %d",a,b)
    image = format("1001 1001 %4b %1b%3b",a<4..1>, a<0..0>, b<2..0>)
    action = {
        let x= IO[a]<b..b>;
        if x == 0 then 
            let result=0;
            let next_Op = (M[PC+2]) | (M[PC+3] << 8);
            size_next_inst (next_Op,result)
            if result == 1 then PC=PC+2; else PC=PC+4; endif;
        endif;
    }
op SBIS(a: rindex, b: card(3)) 
    syntax = format("SBIC IO%d, %d",a,b)
    image = format("1001 1011 %4b %1b%3b",a<4..1>, a<0..0>, b<2..0>)
    action = {
        let x= IO[a]<b..b>;
        if x == 1 then 
            let result=0;
            let next_Op = (M[PC+2]) | (M[PC+3] << 8);
            size_next_inst (next_Op,result)
            if result == 1 then PC=PC+2; else PC=PC+4; endif;
        endif;
    }

op BRBS(s : card(3), k: int(7))
    syntax = format("BRBS %) // TOCOMPLETE
    image = format("1111 00%7b %3b", k<6..0>,s<2..0>)
    action = {
        let SREGS = SREG_S<s..s>;
        if SREGS == 1 then PC = PC + k*2; endif;
    }

op BRBC(s : card(3), k: int(7))
    syntax = format("BRBC %) // TOCOMPLETE
    image = format("1111 01%7b %3b", k<6..0>,s<2..0>)
    action = {
        let SREGS = SREG_S<s..s>;
        if SREGS == 0 then PC = PC + k*2; endif;
    }

op BREQ(k: int(7))
    syntax = format("BREQ .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
    image = format("1111 00%7b 001",k)
    action = {
        if SREG_Z == 1 then PC = PC + k*2; endif;
    }

op BRNE(k: int(7))
	syntax = format("BRNE .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
	image = format("1111 01 %7b 001", k)
	action = {
		if SREG_Z == 0 then PC = PC + k*2; endif;
	}

op BRCS (k: int(7))
    syntax = format("BRCS .%+d ; %+04x", k*2, __IADDR + 2 + k*2) // copie BRNE
    image = format("1111 00%2b %4b %1b000",k<6..5>,k<4..1>,k<0..0>)
    action = {
        if SREG_C == 1 then PC = PC+k*2; endif;
    }

op BRCC (k: int(7))
    syntax = format("BRCC .%+d ; %+04x", k*2, __IADDR + 2 + k*2) // copie BRNE
    image = format("1111 01%2b %4b %1b000",k<6..5>,k<4..1>,k<0..0>)
    action = {
        if SREG_C == 0 then PC = PC+k*2; endif;
    }

// op BRSH ()  exactement même opcode que brcc
// op BRLO ()  exactement même opcode que brcs

op BRMI (k:  int(7))
    syntax = format("BRMI .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
    image = format("1111 00%2b %4b %1b010",k<6..5>,k<4..1>,k<0..0>)
    action = {
        if SREG_N ==1 then PC= PC+ k*2; endif;
    }

op BRPL (k:  int(7))
    syntax = format("BRPL .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
    image = format("1111 01%2b %4b %1b010",k<6..5>,k<4..1>,k<0..0>)
    action = {
        if SREG_N ==0 then PC= PC+ k*2; endif;
    }

op BRGE (k: int(7))
	syntax = format("BRGE .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
	image = format("1111 01 %7b 100", k)
	action = {
		if SREG_N ^ SREG_V == 0 then PC = PC + k*2; endif;
	}

op BRLT(k: int(7))
	syntax = format("BRLT .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
	image = format("1111 00 %7b 100", k)
	action = {
		if SREG_N ^ SREG_V == 1 then PC = PC + k*2; endif;
	}

op BRHS (k: int(7))
	syntax = format("BRHS .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
	image = format("1111 00 %7b 101", k)
	action = {
		if SREG_H == 1 then PC = PC + k*2; endif;
	}
op BRHC (k: int(7))
	syntax = format("BRHC .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
	image = format("1111 01 %7b 101", k)
	action = {
		if SREG_H == 0 then PC = PC + k*2; endif;
	}

op BRTS (k: int(7))
	syntax = format("BRTS .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
	image = format("1111 00 %7b 110", k)
	action = {
		if SREG_T == 1 then PC = PC + k*2; endif;
	}
op BRTC (k: int(7))
	syntax = format("BRTC .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
	image = format("1111 01 %7b 110", k)
	action = {
		if SREG_T == 0 then PC = PC + k*2; endif;
	}

op BRVS (k: int(7))
	syntax = format("BRVS .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
	image = format("1111 00 %7b 011", k)
	action = {
		if SREG_V == 1 then PC = PC + k*2; endif;
	}
op BRVC (k: int(7))
	syntax = format("BRVC .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
	image = format("1111 01 %7b 011", k)
	action = {
		if SREG_V == 0 then PC = PC + k*2; endif;
	}

op BRIE (k: int(7))
	syntax = format("BRIE .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
	image = format("1111 00 %7b 111", k)
	action = {
		if SREG_I == 1 then PC = PC + k*2; endif;
	}
op BRID (k: int(7))
	syntax = format("BRID .%+d ; %+04x", k*2, __IADDR + 2 + k*2)
	image = format("1111 01 %7b 111", k)
	action = {
		if SREG_I == 0 then PC = PC + k*2; endif;
	}

