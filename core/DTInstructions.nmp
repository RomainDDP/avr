// identification
let NAME = "avr.DTInstructions"
let VERSION = "1.0"
let ARCH = "avr"
let BUILDER = "atmel"
let LICENSE = "GPL"
let COPYRIGHT = "University of Toulouse"
let YEAR = "2019"
let URL = ""



////// Data Transfer Instructions //////


op LDI(d: card(4), k: card(8))
	syntax = format("LDI R%d, %d", d+16, k)
	image = format("1110 %4b %4b %4b", k<7..4>, d<3..0>, k<3..0>)
	action = {
		R[d + 16] = k;
	}

op LDS(d: rindex, k: card(16))
	syntax = format("LDS R%d, 0x%04x", d, k)
	image = format("1001 000%1b %4b 0000 %16b", d<4..4>, d<3..0>, k<15..0>)
	action = {
		load(R[d], k);
	}

op MOV(d: rindex, r: rindex)
	syntax = format("MOV R%d, R%d", d, r)
	image = format("0010 11%1b%1b %4b %4b", r<4..4>, d<4..4>, d<3..0>, r<3..0>)
	action = {
		R[d] = R[r];
	}
	
op MOVW(d: card(4), r: card(4))
	syntax = format("MOVW R%d:%d, R%d:%d", d+1, d, r+1, r)
	image = format("0000 0001 %4b %4b", d<3..0>, r<3..0>)
	action = {
		assert (d % 2 != 0 || r % 2 != 0);
		R[d] = R[r];
		R[d+1] = R[r+1];
	}

//LOAD indirect X pointer
op LD_X(d : rindex)
	syntax = format("LD R%d, X", d)
	image = format("1001 000%1b %4b 1100", d<4..4>, d<3..0>)
	action = {
		load(R[d], X);
	}

//post incrementation LD R[d], X+
op LD_X_pi(d: rindex)
	syntax = format("LD R%d, X+", d)
	image = format("1001 000%1b %4b 1101", d<4..4>, d<3..0>)
	action = {
		load(R[d], X);
		X = X + 2;
	}

//pre decrementation LD R[d], -X
op LD_X_pd(d: rindex)
	syntax = format("LD R%d, -X", d)
	image = format("1001 000%1b %4b 1110", d<4..4>, d<3..0>)
	action = {
		X = X - 2;
		load(R[d], X);
	}


//LOAD indirect Y pointe
//op LD_Y(d:rindex)
//	syntax = format("LD R%d, Y", d)
//	image = format("1000 000%1b %4b 1000", d<4..4>, d<3..0>)
//	action = {
//		load(R[d], Y);
//	}

op LD_Y_pi(d:rindex)
	syntax = format("LD R%d, Y+", d)
	image = format("1001 000%1b %4b 1001", d<4..4>, d<3..0>)
	action = {
		load(R[d], Y);
		Y = Y + 2;
	}

op LD_Y_pd(d:rindex)
	syntax = format("LD R%d, -Y", d)
	image = format("1001 000%1b %4b 1010", d<4..4>, d<3..0>)
	action = {
		Y = Y - 2;
		load(R[d], Y);
	}

op LDD_Y(d:rindex, q: card(6))
	syntax = format("LDD R%d, Y+%d", d, q)
	image = format("10%1b0 %2b0%1b %4b 1%3b", q<5..5>, q<4..3>, d<4..4>, d<3..0>, q<2..0>)
	action = {
		load(R[d], Y + q);
	}

//op LD_Z(d: card(5))
//	syntax = format("LD R%d, Z", d)
//	image = format("1000 000%1b %4b 0000", d<4..4>, d<3..0>)
//	action = {
//		load(R[d], Z);
//	}
	
op LD_Z_pi(d: card(5))
	syntax = format("LD R%d, Z+", d)
	image = format("1001 000%1b %4b 0001", d<4..4>, d<3..0>)
	action = {
		load(R[d], Z);
		Z = Z + 2;
	}

op LD_Z_pd(d: card(5))
	syntax = format("LD R%d, -Z", d)
	image = format("1001 000%1b %4b 0010", d<4..4>, d<3..0>)
	action = {
		Z = Z - 2;
		load(R[d], Z);
	}

op LDD_Z(d: card(5), q: card(6))
	syntax = format("LDD R%d, Z+%d", d, q)
	image = format("10%1b0 %2b0%1b %4b 0%3b", q<5..5>, q<4..3>, d<4..4>, d<3..0>, q<2..0>)
	action = {
		load(R[d], Z + q);
	}

op ST_X(d: card(5))
	syntax = format("ST X, R%d", d)
	image = format("1001 001%1b %4b 1100", d<4..4>, d<3..0>)
	action = {
		store(X, R[d]);
	}

op ST_Xpi(d: card(5))
	syntax = format("ST X+, R%d", d)
	image = format("1001 001%1b %4b 1101", d<4..4>, d<3..0>)
	action = {
		store(X, R[d]);
		X = X + 2;
	}

op ST_Xpd(d: card(5))
	syntax = format("ST -X, R%d", d)
	image = format("1001 001%1b %4b 1110", d<4..4>, d<3..0>)
	action = {
		X = X - 2;
		store(X, R[d]);
	}


op STD_Y(d: card(5), q: card(6))
	syntax = format("STD Y+%d, R%d", q, d)
	image = format("10%1b0 %2b1%1b %4b 1%3b", q<5..5>, q<4..3>, d<4..4>, d<3..0>, q<2..0>)
	action = {
		store(Y + q, R[d]);
	}

op ST_Ypi(d: card(5))
	syntax = format("ST Y+, R%d", d)
	image = format("1001 001%1b %4b 1001", d<4..4>, d<3..0>)
	action = {
		store(Y, R[d]);
		Y = Y + 2;
	}

op ST_Ypd(d: card(5))
	syntax = format("ST -Y, R%d", d)
	image = format("1001 001%1b %4b 1010", d<4..4>, d<3..0>)
	action = {
		Y = Y - 2;
		store(Y, R[d]);
	}

op STD_Z(d: card(5), q: card(6))
	syntax = format("STD Z+%d, R%d", q, d)
	image = format("10%1b0 %2b1%1b %4b 0%3b", q<5..5>, q<4..3>, d<4..4>, d<3..0>, q<2..0>)
	action = {
		store(Z + q, R[d]);
	}

op ST_Zpi(d: card(5))
	syntax = format("ST Z+, R%d", d)
	image = format("1001 001%1b %4b 0001", d<4..4>, d<3..0>)
	action = {
		store(Z, R[d]);
		Z = Z + 2;
	}

op ST_Zpd(d: card(5))
	syntax = format("ST -Z, R%d", d)
	image = format("1001 001%1b %4b 0010", d<4..4>, d<3..0>)
	action = {
		Z = Z - 2;
		store(Z, R[d]);
	}


op IN(d : card(5), a: card(6))
	syntax = format("IN R%d, %d", d, a)
	image = format("1011 0%2b%1b %4b %4b", a<5..4>, d<4..4>, d<3..0>, a<3..0>)
	action = {
		R[d] = IO[a];
	}

op OUT(d: card(5), a: card(6))
	syntax = format("OUT %d, R%d", a, d)
	image = format("1011 1%2b%1b %4b %4b", a<5..4>, d<4..4>, d<3..0>, a<3..0>)
	action = {
		IO[a] = R[d];
	}